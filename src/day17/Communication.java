package day17;

// 线程间通信的理解
// 当我们需要多个线程共同完成一个任务，并且希望他们有规律的执行，name多线程之间需要一些通信机制，可以协调他们的工作，以此实现多线程共同操作一份数据
// 涉及到三个方法的使用
// wait():线程一旦执行，就会进入等待状态，同时释放同步监视器的调用
//notify()：一旦执行此方法，就会唤醒被wait（）线程中优先级最高的一个线程（如果多个wait（）
// 的线程的优先级相同， 那么就是随机唤醒一个）.被唤醒的线程从当初被wait的位置继续执行
//notifyAll()：唤醒所有的线程

//注意点：
// 此三个方法的调用者，必须是同步监视器
// 此三个方法必须是同步代码块活同步方法
//此三个方法在objet类当中

// wait和sleep的区别
// 相同点：一旦执行当前线程都会进入阻塞状态
/*
 不同点：
 声明的位置 :wait()：声明在object类中
            sleep()：声明在thread类中，静态的
 使用的场景不同：wait()：只能使用在同步代码块活同步方法中
              sleep（）:可以在任何需要的使用场景
使用在同步代码块活同步代码块：wait()一旦执行，会释放同步监视器
sleep（）：一旦执行，不会释放同步监视器
结束阻塞的方式：
    wait()：到达指定时间自动结束阻塞或通过被notify唤醒，结束阻塞
    sleep()：到达指定时间自动结束阻塞

*/



public class Communication {


}
